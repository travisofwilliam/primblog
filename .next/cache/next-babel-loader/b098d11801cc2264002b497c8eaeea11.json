{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Note from '../../../models/Note';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const note = await Note.findById(id);\n\n        if (!note) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: note\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT':\n      try {\n        const note = await Note.findByIdAndUpdate(id);\n\n        if (!note) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: note\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const deletedNote = await Note.deleteOne({\n          _id: id\n        });\n\n        if (!deletedNote) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["/Users/traviswilliams/Desktop/mern/pages/api/notes/[id].js"],"names":["dbConnect","Note","req","res","query","id","method","note","findById","status","json","success","data","error","findByIdAndUpdate","deletedNote","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA;AAFI,MAGFJ,GAHJ;;AAKA,UAAQI,MAAR;AACE,SAAK,KAAL;AACE,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,QAAL,CAAcH,EAAd,CAAnB;;AAEA,YAAI,CAACE,IAAL,EAAW;AACTJ,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AACD;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACD,OARD,CAQE,OAAOM,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF,SAAK,KAAL;AACE,UAAI;AACF,cAAMJ,IAAI,GAAG,MAAMN,IAAI,CAACa,iBAAL,CAAuBT,EAAvB,CAAnB;;AAEA,YAAI,CAACE,IAAL,EAAW;AACTJ,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AACD;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACD,OARD,CAQE,OAAOM,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF,SAAK,QAAL;AACE,UAAI;AACF,cAAMI,WAAW,GAAG,MAAMd,IAAI,CAACe,SAAL,CAAe;AAAEC,UAAAA,GAAG,EAAEZ;AAAP,SAAf,CAA1B;;AAEA,YAAI,CAACU,WAAL,EAAkB;AAChBZ,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AACD;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SAArB;AACD,OARD,CAQE,OAAOC,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF;AACER,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AA1CJ;AA4CD,CAlDD","sourcesContent":["import dbConnect from '../../../utils/dbConnect'\nimport Note from '../../../models/Note'\n\ndbConnect()\n\nexport default async (req, res) => {\n  const {\n    query: { id },\n    method\n  } = req\n\n  switch (method) {\n    case 'GET':\n      try {\n        const note = await Note.findById(id)\n\n        if (!note) {\n          res.status(400).json({ success: false })\n        }\n\n        res.status(200).json({ success: true, data: note })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    case 'PUT':\n      try {\n        const note = await Note.findByIdAndUpdate(id)\n\n        if (!note) {\n          res.status(400).json({ success: false })\n        }\n\n        res.status(200).json({ success: true, data: note })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    case 'DELETE':\n      try {\n        const deletedNote = await Note.deleteOne({ _id: id })\n\n        if (!deletedNote) {\n          res.status(400).json({ success: false })\n        }\n\n        res.status(200).json({ success: true, data: {} })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n    default:\n      res.status(400).json({ success: false })\n      break\n  }\n}"]},"metadata":{},"sourceType":"module"}