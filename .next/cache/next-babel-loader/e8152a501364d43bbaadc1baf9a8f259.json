{"ast":null,"code":"var _jsxFileName = \"/Users/traviswilliams/Desktop/mern/pages/new.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\n\nconst NewPost = () => {\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    title: '',\n    body: ''\n  });\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: isSubmitting,\n    1: setIsSubmitting\n  } = useState(false);\n  useEffect(() => {\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        // createNote()\n        alert('Success');\n      } else {\n        setIsSubmitting(false);\n      }\n    }\n  }, [errors]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errs = validate();\n    setErrors(errs);\n    setIsSubmitting(true);\n  };\n\n  const handleChange = e => {\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [e.target.name]: e.target.value\n    }));\n\n    if (errors[e.target.name]) {\n      delete errors[e.target.name];\n    }\n  };\n\n  const validate = () => {\n    let err = {};\n\n    if (!form.title) {\n      err.title = 'Title is required';\n    }\n\n    if (!form.body) {\n      err.body = 'Body is required';\n    }\n\n    return err;\n  };\n\n  return __jsx(\"div\", {\n    className: \"container text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Create New Post\"), __jsx(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"New Post\"), __jsx(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, isSubmitting ? 'Loading...' : __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"Title:\"), __jsx(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    className: \"mb-3\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 32\n    }\n  }), errors.title && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 35\n    }\n  }, __jsx(\"i\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 38\n    }\n  }, errors.title)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), __jsx(\"hr\", {\n    className: \"w-60\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"Body:\"), __jsx(\"textarea\", {\n    onChange: handleChange,\n    name: \"body\",\n    id: \"\",\n    cols: \"30\",\n    rows: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), errors.body && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 34\n    }\n  }, __jsx(\"i\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 37\n    }\n  }, errors.body)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Create\")))));\n};\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/traviswilliams/Desktop/mern/pages/new.js"],"names":["useState","useEffect","NewPost","form","setForm","title","body","errors","setErrors","isSubmitting","setIsSubmitting","Object","keys","length","alert","handleSubmit","e","preventDefault","errs","validate","handleChange","target","name","value","err"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst NewPost = () => {\n\n  const [form, setForm] = useState({ title: '', body: '' })\n  const [errors, setErrors] = useState({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  useEffect(() => {\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        // createNote()\n        alert('Success')\n      } else {\n        setIsSubmitting(false)\n      }\n    }\n  }, [errors])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    let errs = validate()\n    setErrors(errs)\n    setIsSubmitting(true)\n  }\n\n  const handleChange = (e) => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    })\n    if (errors[e.target.name]) {\n      delete errors[e.target.name]\n    }\n  }\n\n  const validate = () => {\n    let err = {}\n\n    if (!form.title) {\n      err.title = 'Title is required'\n    }\n    if (!form.body) {\n      err.body = 'Body is required'\n    }\n\n    return err\n  }\n\n  return (\n    <div className='container text-center'>\n      <h3 className='mt-3'>Create New Post</h3>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          New Post\n        </div>\n        <div className=\"card-body\">\n          {\n            isSubmitting ? 'Loading...'\n              :\n              <form onSubmit={handleSubmit}>\n                <h4>Title:</h4><input type=\"text\" name=\"title\" className='mb-3' onChange={handleChange} />\n                {\n                  errors.title && <p><i className='text-danger'>{errors.title}</i></p>\n                }\n                <br />\n                <hr className='w-60' />\n                <h4>Body:</h4>\n                <textarea onChange={handleChange} name=\"body\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\n                {\n                  errors.body && <p><i className='text-danger'>{errors.body}</i></p>\n                }\n                <br />\n                <button type=\"submit\" className='btn btn-primary'>Create</button>\n              </form>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NewPost"]},"metadata":{},"sourceType":"module"}